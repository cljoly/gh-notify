#!/usr/bin/env bash
set -e -o pipefail

# NotificationReason:
# assign, author, comment, invitation, manual, mention, review_requested, security_alert, state_change, subscribed, team_mention, ci_activity
# NotificationSubjectTypes:
# CheckSuite, Commit, Discussion, Issue, PullRequest, Release, RepositoryVulnerabilityAlert, ...

GREEN='\033[0;32m'
NC='\033[0m'

help() {
    # IMPORTANT: keep it synchronized with the README, but without the Examples
    # Leave one line blank at the beginning and end, and two between sections. This looks cleaner.
    cat <<EOF

    gh notify [-Flag]

Flag   | Description
------ | -------------
<none> | show all unread notifications
-a     | show all (read/ unread) notifications
-r     | mark all notifications as read
-e     | exclude notifications matching a string (REGEX support)
-f     | filter notifications matching a string (REGEX support)
-s     | print a static display
-n NUM | max number of notifications to show
-p     | show only participating or mentioned notifications
-w     | display the preview window in interactive mode
-h     | show the help page


    Interactive mode with Fuzzy Finder (fzf)

HotKey   | Description
-------- | -------------
?        | toggle help
tab      | toggle preview notification
enter    | print notification and exit
shift+↑↓ | scroll the preview up/ down
ctrl+b   | open notification in browser
ctrl+r   | mark all displayed notifications as read and exit
ctrl+x   | write a comment with the editor and exit
esc      | exit

EOF
}

include_all_flag='false'
preview_window_visibility='hidden'
only_participating_flag='false'
print_static_flag='false'
mark_read_flag='false'
num_notifications='0'
exclusion_string='XXX_BOGUS_STRING_THAT_SHOULD_NOT_EXIST_XXX'
filter_string=''
# UTC time ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
# https://docs.github.com/en/rest/overview/resources-in-the-rest-api#timezones
timestamp=$(date +"%Y-%m-%dT%H:%M:%S%z")

while getopts 'e:f:n:pawhsr' flag; do
    case "${flag}" in
    n) num_notifications="${OPTARG}" ;;
    e) exclusion_string="${OPTARG}" ;;
    f) filter_string="${OPTARG}" ;;
    a) include_all_flag='true' ;;
    w) preview_window_visibility='nohidden' ;;
    p) only_participating_flag='true' ;;
    s) print_static_flag='true' ;;
    r) mark_read_flag='true' ;;
    h)
        help
        exit 0
        ;;
    *)
        help
        exit 1
        ;;
    esac
done

get_notifs() {
    page_num=$1
    if [ "$page_num" == "" ]; then
        page_num=1
    fi
    local_page_size=100
    if [ "$num_notifications" != "0" ]; then
        local_page_size=$num_notifications
    fi
    printf >&2 "." # "marching ants" because sometimes this takes a bit.
    # timefmt must use the reference time Mon Jan 2 15:04:05 MST 2006 to format a given time
    gh api -X GET notifications --cache=20s \
        -f per_page="$local_page_size" -f all="$include_all_flag" -f participating="$only_participating_flag" -f page="$page_num" \
        --template '
    {{- range . -}}
            {{- /* NOTE: Hidden data points without color codes used in GraphQL query */ -}}
        {{- printf "%s\t%s\t" (timefmt "2006-01" .updated_at) .repository.full_name -}}
        {{- printf "%s\t%s\t%s\t" (timefmt "02/Jan 15:04" .updated_at | color "gray+h") .subject.type .subject.title -}}
        {{- printf "%s%s%s\t" (.repository.owner.login | color "cyan+h") ("/" | color "gray+h") (.repository.name | color "cyan+hb") -}}
        {{- if .subject.url -}}{{- printf "%s\t" .subject.url -}}
            {{- else -}}{{- printf " \t" -}}
        {{- end -}}
        {{- if .unread -}} {{- printf "%s\n" ("●" | color "magenta") -}}
            {{- else -}}{{- printf "%s\n" (" " | color "magenta") -}}
        {{- end -}}
    {{- end -}}'
}

print_notifs() {
    local hidden_updated_at hidden_repository_full_name timefmt type title repo url unread number graphql_query_discussion
    all_notifs=""
    page_num=1
    while true; do
        page=$(get_notifs $page_num)
        if [ "$page" == "" ]; then
            break
        else
            page_num=$((page_num + 1))
        fi
        new_notifs=$(
            echo "$page" | while IFS=$'\t' read -r hidden_updated_at hidden_repository_full_name timefmt type title repo url unread; do
                if grep -q "Discussion" <<<"$type"; then
                    graphql_query_discussion=$'query ($filter: String!) { search(query: $filter, type: DISCUSSION, first: 1) { nodes { ... on Discussion { number }}}}'
                    # https://docs.github.com/en/search-github/searching-on-github/searching-discussions
                    number=$(gh api graphql --cache=20m --raw-field filter="$title in:title updated:>=$hidden_updated_at repo:$hidden_repository_full_name" --raw-field query="$graphql_query_discussion" --jq '.data.search.nodes | .[].number')
                elif grep -q "Release" <<<"$type"; then
                    release_info=()
                    while IFS='' read -r line; do release_info+=("$line"); done < <(gh api --cache=20m "$url" --jq '.tag_name, .prerelease')
                    number="${release_info[0]}"
                    "${release_info[1]}" && type="Pre-release"
                else
                    # gh api calls cost time, try to avoid them as much as possible
                    # ${variable//search/replace} - https://wiki.bash-hackers.org/syntax/pe
                    number=${url/*\//#}
                fi
                printf "\n%s\t%s\t%s ${GREEN}%s${NC} %s\t%s\n" "$timefmt" "$repo" "$type" "$number" "$unread" "$title"
            done
        )
        all_notifs="$all_notifs$new_notifs"
        # this is going to be a bit funky.
        # if you specify a number larger than 100
        # GitHub will ignore it and give you only 100
        if [ "$num_notifications" != "0" ]; then
            break
        fi
    done
    # clear the dots we printed
    echo >&2 -e "\r\033[K"
    # the different pages frequently come back with different
    # column widths.
    # If we insert a tab before the notification type
    # and recolumnize on that everything works out.
    echo "$all_notifs" |
        sed -e "s/ Issue / \tIssue /" \
            -e "s/ PullRequest / \tPullRequest /" \
            -e "s/ Commit / \tCommit /" \
            -e "s/ Release / \tRelease /" |
        column -t -s $'\t'
}

filtered_notifs() {
    print_notifs | grep -v "$exclusion_string" | grep "$filter_string"
}

mark_read() {
    gh api -X PUT notifications -f last_read_at="$timestamp" -F read=true --silent
}

select_notif() {
    local notifs open_notification_browser preview_notification selection key repo type num
    notifs="$(filtered_notifs)"
    [ -n "$notifs" ] || exit 0
    open_notification_browser='if grep -qE "Issue|PullRequest" <<<{4}; then gh issue view {5} -wR {3}; elif grep -q "[Rr]elease" <<<{4}; then gh release view {5} -wR {3};  elif grep -q Discussion <<<{4}; then open https://github.com/{3}/discussions/{5} ; else gh repo view -w {3}; fi'
    preview_notification='echo \[{1} {2} - {4}\] ;if grep -q Issue <<<{4}; then gh issue view {5} -R {3} --comments; elif grep -q PullRequest <<<\"{4}\"; then gh pr view {5} -R {3} --comments; elif grep -q "[Rr]elease" <<<{4}; then gh release view {5} -R {3}; else echo "Notification preview for {4} is not supported."; fi'
    # Enable terminal-style output even when the output is redirected.
    export GH_FORCE_TTY=100%
    # See the man page (man fzf) for an explanation of the arguments.
    selection=$(fzf <<<"$notifs" --ansi --no-multi --reverse --info=inline \
        --margin 2,1%,2,1% --pointer='▶' \
        --border horizontal --color "border:#778899" \
        --header $'? - Toggle Help\n\n' --color 'header:italic:dim' \
        --header-first --bind "change:first" \
        --bind "?:toggle-preview+change-preview:printf \"Help\n%s\" \"$(help)\"" \
        --bind "ctrl-b:execute-silent:$open_notification_browser" \
        --bind "tab:toggle-preview+change-preview:$preview_notification" \
        --preview-window wrap:"$preview_window_visibility":50%:right:border-left \
        --preview "$preview_notification" \
        --expect "enter,ctrl-r,ctrl-x" | tr '\n' ' ')

    # Hotkey actions that close fzf are defined below
    read -r key _ _ repo type num _ <<<"$selection"
    [[ -n "$key" ]] && case "$key" in
    enter)
        # Disable the gh pager
        export GH_PAGER="cat"
        if grep -q "Issue" <<<"$type"; then
            gh issue view "$num" -R "$repo" --comments
        elif grep -q "PullRequest" <<<"$type"; then
            gh pr view "$num" -R "$repo" --comments
        elif grep -q "[Rr]elease" <<<"$type"; then
            gh release view "$num" -R "$repo"
        else
            echo "Notification preview for $type is not supported."
        fi
        ;;
    ctrl-r)
        # TODO Dynamically update the input list without restarting fzf
        # --bind 'ctrl-m:execute(gh api ...)+reload(...)'
        mark_read
        ;;
    ctrl-x)
        if grep -qE "Issue|PullRequest" <<<"$type"; then
            gh issue comment "${num}" -R "$repo"
        else
            echo "Writing comments for $type is not supported."
        fi
        ;;
    esac
}

if [[ $mark_read_flag == "true" ]]; then
    mark_read
    exit 0
fi

if [[ $print_static_flag == "false" ]]; then
    if ! type -p fzf >/dev/null; then
        echo "error: install \`fzf\` or use the -s flag" >&2
        exit 1
    fi
    select_notif
else
    filtered_notifs
fi
